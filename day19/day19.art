; Day 19 Aplenty 

;;;;;;;;;;;;;;;;
;;  parsing   ;;
;;;;;;;;;;;;;;;;

; read the file into two halves
[workflows,parts]: split.by: "\n\n" replace read "input" {/\r/} ""

; parse workflows as a tree, 
; with complete conditions to ender the child node

split.by: "\n" 'workflows
tree: #[]
loop workflows [e][
    x: split.by: "{" replace e "}" "" 
    
    line: map split.by: "," x\1 [e][split.by: ":" e]
    t: ""
    tree\[x\0]: map.with:'i line 'y 
    [if? i>0 [t: t ++ (replace line\[i-1]\0 
    [{/([xmas])<(\d)/}, {/([xmas])>(\d)/} ]["$1>=$2" "$1=<$2"])++",", t]
    c:"", if? i<> (size line) -1 [c:y\0]
    @[replace t++c {/,$/} "" last y]]
 
    ]

; parse the parts as a dictionary, interesting application of do keyword

parts:
map split.by: "\n" replace parts ["{","=", "}"] ["#[", ":","]"] [e][do e]

; A DFS prototype for part 1 and 2
; We will modify this for both parts.

explore: function [label][
    print ~"I am at |label|..."
    if? label = "A"  [print "reach A" return 1]
    if? label = "R"  [print "reach R" return 0]
    loop tree\[label] [e][
        print ~"explore |last e|"
        explore last e
    ]
    return 0
]

;;;;;;;;;;;;;;;;
;;   part 1   ;;
;;;;;;;;;;;;;;;;

explore_part: function [label, part][
    if? label = "A"  [return true]
    if? label = "R"  [return false]
    loop tree\[label] [e][
        z: all? map chop split.by: "," fold.seed: "" split.by: "," e\0 [a,x][a++"part\\"++x++","] [e][do e]
        if? z [return explore_part e\1 part ]
    ]
]

; solve part 1
u: select parts [part][explore_part "in" part]
part1: fold u [a p][a + sum values p ]
print ~"part 1 is ..... |part1|"

;;;;;;;;;;;;;;;;
;;   part 2   ;;
;;;;;;;;;;;;;;;;

compute: function [rule range][
    new_range: new range
    loop split.by: "," rule [r][
        c:r\0
        num: to :integer join match r {/\d/}
        ineq: match r {/=<|>=|<|>/}
        a: #["=<": [1 0] ">=": [0 0] "<": [1 neg 1] ">": [0 1]]
        g: a\[ineq\0]
        if? ineq\0 = ">" [inc 'num]
        if? ineq\0 = "<" [dec 'num]
        if? g\0=1 [
            new_range\[c]\[g\0]: min @[new_range\[c]\[g\0] num]
        ]else[
            new_range\[c]\[g\0]: max @[new_range\[c]\[g\0] num]
        ]
    ]
    return new_range
]

Q: 0
explore_ranges: function [label range][
    if? label = "A"  
    [
    'Q + product map values range [v][1 + v\1 - v\0]
     return]
    if? label = "R"  [return]
    else [loop tree\[label] [e][
        new_range: compute e\0 range
        explore_ranges e\1 new_range
    ]]
]

ran: #[x:[1,4000] m:[1,4000] a:[1,4000] s:[1,4000]]
explore_ranges "in" ran
print ~"part 2 is ..... |Q|"

; My input: 
; part 1 is ..... 406934
; part 2 is ..... 131192538505367